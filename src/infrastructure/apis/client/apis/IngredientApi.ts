/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IngredientDTO,
  IngredientDTOPagedResponseRequestResponse,
  IngredientDTORequestResponse,
  RequestResponse,
} from '../models';
import {
    IngredientDTOFromJSON,
    IngredientDTOToJSON,
    IngredientDTOPagedResponseRequestResponseFromJSON,
    IngredientDTOPagedResponseRequestResponseToJSON,
    IngredientDTORequestResponseFromJSON,
    IngredientDTORequestResponseToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiIngredientAddPostRequest {
    ingredientDTO?: IngredientDTO;
}

export interface ApiIngredientDeleteIdDeleteRequest {
    id: string;
}

export interface ApiIngredientGetByIdIdGetRequest {
    id: string;
}

export interface ApiIngredientGetIngredientsForFoodFoodIdGetRequest {
    foodId: string;
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiIngredientUpdatePutRequest {
    ingredientDTO?: IngredientDTO;
}

/**
 * 
 */
export class IngredientApi extends runtime.BaseAPI {

    /**
     */
    async apiIngredientAddPostRaw(requestParameters: ApiIngredientAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Ingredient/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IngredientDTOToJSON(requestParameters.ingredientDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiIngredientAddPost(requestParameters: ApiIngredientAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiIngredientAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiIngredientDeleteIdDeleteRaw(requestParameters: ApiIngredientDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiIngredientDeleteIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Ingredient/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiIngredientDeleteIdDelete(requestParameters: ApiIngredientDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiIngredientDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiIngredientGetByIdIdGetRaw(requestParameters: ApiIngredientGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IngredientDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiIngredientGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Ingredient/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IngredientDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiIngredientGetByIdIdGet(requestParameters: ApiIngredientGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IngredientDTORequestResponse> {
        const response = await this.apiIngredientGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiIngredientGetIngredientsForFoodFoodIdGetRaw(requestParameters: ApiIngredientGetIngredientsForFoodFoodIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IngredientDTOPagedResponseRequestResponse>> {
        if (requestParameters.foodId === null || requestParameters.foodId === undefined) {
            throw new runtime.RequiredError('foodId','Required parameter requestParameters.foodId was null or undefined when calling apiIngredientGetIngredientsForFoodFoodIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Ingredient/GetIngredientsForFood/{foodId}`.replace(`{${"foodId"}}`, encodeURIComponent(String(requestParameters.foodId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IngredientDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiIngredientGetIngredientsForFoodFoodIdGet(requestParameters: ApiIngredientGetIngredientsForFoodFoodIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IngredientDTOPagedResponseRequestResponse> {
        const response = await this.apiIngredientGetIngredientsForFoodFoodIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiIngredientUpdatePutRaw(requestParameters: ApiIngredientUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Ingredient/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IngredientDTOToJSON(requestParameters.ingredientDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiIngredientUpdatePut(requestParameters: ApiIngredientUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiIngredientUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
