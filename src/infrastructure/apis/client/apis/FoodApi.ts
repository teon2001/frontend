/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FoodAddDTO,
  FoodDTOListRequestResponse,
  FoodDTOPagedResponseRequestResponse,
  FoodDTORequestResponse,
  FoodUpdateDTO,
  RequestResponse,
} from '../models';
import {
    FoodAddDTOFromJSON,
    FoodAddDTOToJSON,
    FoodDTOListRequestResponseFromJSON,
    FoodDTOListRequestResponseToJSON,
    FoodDTOPagedResponseRequestResponseFromJSON,
    FoodDTOPagedResponseRequestResponseToJSON,
    FoodDTORequestResponseFromJSON,
    FoodDTORequestResponseToJSON,
    FoodUpdateDTOFromJSON,
    FoodUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiFoodAddPostRequest {
    foodAddDTO?: FoodAddDTO;
}

export interface ApiFoodDeleteIdDeleteRequest {
    id: string;
}

export interface ApiFoodDownloadImgIdGetRequest {
    id: string;
}

export interface ApiFoodGetByIdIdGetRequest {
    id: string;
}

export interface ApiFoodGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiFoodGetRecommendationGetRequest {
    maxCalories?: number;
}

export interface ApiFoodUpdatePutRequest {
    foodUpdateDTO?: FoodUpdateDTO;
}

export interface ApiFoodUploadPostRequest {
    name?: string;
    description?: string;
    price?: number;
    kcalPer100g?: number;
    quantity?: number;
    img?: Blob;
}

/**
 * 
 */
export class FoodApi extends runtime.BaseAPI {

    /**
     */
    async apiFoodAddPostRaw(requestParameters: ApiFoodAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Food/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FoodAddDTOToJSON(requestParameters.foodAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiFoodAddPost(requestParameters: ApiFoodAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiFoodAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiFoodDeleteIdDeleteRaw(requestParameters: ApiFoodDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiFoodDeleteIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Food/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiFoodDeleteIdDelete(requestParameters: ApiFoodDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiFoodDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiFoodDownloadImgIdGetRaw(requestParameters: ApiFoodDownloadImgIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiFoodDownloadImgIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Food/DownloadImg/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async apiFoodDownloadImgIdGet(requestParameters: ApiFoodDownloadImgIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.apiFoodDownloadImgIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiFoodGetAllGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FoodDTOListRequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Food/GetAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FoodDTOListRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiFoodGetAllGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FoodDTOListRequestResponse> {
        const response = await this.apiFoodGetAllGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiFoodGetByIdIdGetRaw(requestParameters: ApiFoodGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FoodDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiFoodGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Food/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FoodDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiFoodGetByIdIdGet(requestParameters: ApiFoodGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FoodDTORequestResponse> {
        const response = await this.apiFoodGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiFoodGetPageGetRaw(requestParameters: ApiFoodGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FoodDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Food/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FoodDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiFoodGetPageGet(requestParameters: ApiFoodGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FoodDTOPagedResponseRequestResponse> {
        const response = await this.apiFoodGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiFoodGetRecommendationGetRaw(requestParameters: ApiFoodGetRecommendationGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FoodDTORequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.maxCalories !== undefined) {
            queryParameters['maxCalories'] = requestParameters.maxCalories;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Food/GetRecommendation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FoodDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiFoodGetRecommendationGet(requestParameters: ApiFoodGetRecommendationGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FoodDTORequestResponse> {
        const response = await this.apiFoodGetRecommendationGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiFoodUpdatePutRaw(requestParameters: ApiFoodUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Food/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FoodUpdateDTOToJSON(requestParameters.foodUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiFoodUpdatePut(requestParameters: ApiFoodUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiFoodUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiFoodUploadPostRaw(requestParameters: ApiFoodUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('Name', requestParameters.name as any);
        }

        if (requestParameters.description !== undefined) {
            formParams.append('Description', requestParameters.description as any);
        }

        if (requestParameters.price !== undefined) {
            formParams.append('Price', requestParameters.price as any);
        }

        if (requestParameters.kcalPer100g !== undefined) {
            formParams.append('KcalPer100g', requestParameters.kcalPer100g as any);
        }

        if (requestParameters.quantity !== undefined) {
            formParams.append('Quantity', requestParameters.quantity as any);
        }

        if (requestParameters.img !== undefined) {
            formParams.append('Img', requestParameters.img as any);
        }

        const response = await this.request({
            path: `/api/Food/Upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiFoodUploadPost(requestParameters: ApiFoodUploadPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiFoodUploadPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
