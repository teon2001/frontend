/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ArticleDTO,
  ArticleDTOPagedResponseRequestResponse,
  ArticleDTORequestResponse,
  RequestResponse,
} from '../models';
import {
    ArticleDTOFromJSON,
    ArticleDTOToJSON,
    ArticleDTOPagedResponseRequestResponseFromJSON,
    ArticleDTOPagedResponseRequestResponseToJSON,
    ArticleDTORequestResponseFromJSON,
    ArticleDTORequestResponseToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiArticleGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiArticleIdDeleteRequest {
    id: string;
}

export interface ApiArticleIdGetRequest {
    id: string;
}

export interface ApiArticlePostRequest {
    articleDTO?: ArticleDTO;
}

/**
 * 
 */
export class ArticleApi extends runtime.BaseAPI {

    /**
     */
    async apiArticleGetRaw(requestParameters: ApiArticleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArticleDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Article`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiArticleGet(requestParameters: ApiArticleGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArticleDTOPagedResponseRequestResponse> {
        const response = await this.apiArticleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiArticleIdDeleteRaw(requestParameters: ApiArticleIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiArticleIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Article/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiArticleIdDelete(requestParameters: ApiArticleIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiArticleIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiArticleIdGetRaw(requestParameters: ApiArticleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArticleDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiArticleIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Article/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiArticleIdGet(requestParameters: ApiArticleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArticleDTORequestResponse> {
        const response = await this.apiArticleIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiArticlePostRaw(requestParameters: ApiArticlePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Article`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ArticleDTOToJSON(requestParameters.articleDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiArticlePost(requestParameters: ApiArticlePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiArticlePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
